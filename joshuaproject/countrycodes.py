# AUTOGENERATED! DO NOT EDIT! File to edit: 01_countrycodes.ipynb (unless otherwise specified).

__all__ = ['CountryCodes']

# Cell
import pandas as pd
from fastcore.test import *

# Cell
class CountryCodes():
    """Returns FIPS and ISO 3166 alpha 2 country codes  for `cname` and converts between."""
    def __init__(self):
        self.data = pd.read_csv('data/country_codes.csv',skiprows=3,names=['cname','FIPS','ISO'])

    def __len__(self):
        """Returns lenth of `data`."""
        return len(self.data)

    def __repr__(self):
        """Returns a `str` representing the `data`."""
        return f'{self.data.to_string(max_rows=None)}'

    def head(self,rows=10):
        """Returns first `rows`."""
        return self.data.head(rows)

    def tail(self,rows=10):
        """Returns last `rows`."""
        return self.data.tail(rows)

    def __getitem__(self,idx):
        """Return `idx`th element of data."""
        return self.data.iloc[idx]

    def like(self,cname:str,max:int=None)->list:
        """Returns a list of dict with `max` entries with country name like `cname`."""
        res = self.data[self.data['cname'].str.contains(cname)].to_dict(orient='record')
        if len(res) == 0: return []
        if (max is not None) and (len(res) > max):
            assert max >0, "CountryCodes().like: `max` argument must be positive or `None`."
            return res[:max]
        return res

    def __call__(self,cname:str)->str:
        """Returns `fips` code of `cname`."""
        return self.like(cname,max=1)[0]['FIPS']

    def fips(self,cname:str)->str:
        """Returns `fips` code of `cname`."""
        return self.__call__(cname)

    def iso(self,cname:str)->str:
        """Returns `iso` code of `cname`."""
        return self.like(cname,max=1)[0]['ISO']

    def name(self,cname:str)->str:
        """Returns a `str` of the first of country name like `cname`."""
        return self.like(cname,max=1)[0]['cname']